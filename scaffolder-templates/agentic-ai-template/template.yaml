apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: agentic-ai-template
  title: DevEx-Driven Cloud Scaffolding for Agentic AI Projects
  description: Develop modular, self-adapting Agentic AI projects that automate cloud-native application scaffolding, leveraging Red Hat OpenShift AI and cloud native app development tools to streamline enterprise AI workflows.
  tags:
    - java
    - ai
    - agentic
    - llm
    - redhatai
    - workshop
spec:
  owner: rad-workshop-authors
  type: service

  parameters:
    - title: Provide Information for Application
      required:
        - component_id
        - java_package_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          default: agentic-app-userXX
          ui:field: EntityNamePicker
          maxLength: 23
        group_id:
          title: Group Id
          type: string
          default: redhat.janus
          description: Maven Group Id
        artifact_id:
          title: Artifact Id
          type: string
          default: parasol-app
          description: Maven Artifact Id
        java_package_name:
          title: Java Package Name
          default: org.redhat.janus
          type: string
          description: Name for the java package. e.g., (com.redhat.example)
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
          default: A Parasol Insurance AI app
    - title: Provide Image Registry Information
      required:
        - image_registry
      properties:
        image_registry:
          title: Image Registry
          type: string
          enum:
            - Openshift
            - Quay
      dependencies:
        image_registry:
          oneOf:
            - properties:
                image_registry:
                  enum:
                    - Openshift
                image_host:
                  title: Image Host
                  type: string
                  description: Host for storing image
                  default: image-registry.openshift-image-registry.svc:5000
                image_tag:
                  title: Image Tag
                  default: latest
                  type: string
                  description: Build Image tag
            - properties:
                image_registry:
                  enum:
                    - Quay
                image_host:
                  title: Image Host
                  type: string
                  description: Host for storing image
                  default: {{ quay_host }}
                image_organization:
                  title: Organization
                  type: string
                  description: Name of the Quay Organization
                  default: quayadmin
                image_tag:
                  title: Image Tag
                  default: latest
                  type: string
                  description: Build Image tag
    - title: AI Models (LLMs) Information
      required:
        - ai_model
      properties:
        ai_model:
          title: AI Models
          description: A Collection of AI Models for Building Agentic AI Applications
          type: string
          default: granite-3.1
          enum:
            - granite-3.1
            - llama3.3
            - qwen2.5
            - deepseek-r1
            - mistral
            - phi3
      dependencies:
        ai_model:
          oneOf:
            - properties:
                ai_model:
                  enum:
                    - granite-3.1
                model_name:
                  title: Model Name
                  type: string
                  description: Granite-3.1 is a high-performance, open-source, distributed graph database.
                model_endpoint:
                  title: Model Endpoint
                  type: string
                  description: AI Model Inference Service API
                  default: http://granite3-predictor.aiworkshop.svc.cluster.local:8080/v1
            - properties:
                ai_model:
                  enum:
                    - llama3.3
                model_name:
                  title: Model Name
                  type: string
                  description: Name of the AI Model
                  default: Llama 3.3 is a powerful and advanced large language model developed by Meta AI.
                model_endpoint:
                  title: Model Endpoint
                  type: string
                  description: AI Model Inference Service API
                  default: http://llama3-predictor.aiworkshop.svc.cluster.local:8080/v1
            - properties:
                ai_model:
                  enum:
                    - qwen2.5
                model_name:
                  title: Model Name
                  type: string
                  description: Qwen-2.5 is a large language model developed by Huawei, known for its advanced capabilities in natural language understanding and generation.
                  default: qwen2.5
                model_endpoint:
                  title: Model Endpoint
                  type: string
                  description: AI Model Inference Service API
                  default: http://qwen-2-predictor.aiworkshop.svc.cluster.local:8080/v1
    - title: Model Context Protocol (MCP) Servers Information
      required:
        - mcp_server
      properties:
        mcp_server:
          title: Model Context Protocol (MCP) servers
          description: A Collection of Model Context Protocol (MCP) servers for Building Agentic AI Applications with Large Language Models (LLMs)
          type: array
          items:
            type: string
            enum:
              - Filesystem
              - PostgreSQL
              - SQLite
              - Slack
              - GoogleMaps
              - Memory
          uniqueItems: true
          ui:widget: checkboxes
      dependencies:
        mcp_server:
          oneOf:
            - properties:
                mcp_server:
                  enum:
                    - Filesystem
                file_path:
                  title: File Path
                  type: string
                  description: Reads complete file contents with UTF-8 encoding
                  default: /projects/path/to/file.txt
            - properties:
                mcp_server:
                  enum:
                    - PostgreSQL
                psql_host:
                  title: PostgreSQL Host
                  type: string
                  description: PostgreSQL Host
                  default: {{ postgres_host }}
    - title: Application repository Information
      required:
        - repo
      properties:
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              description: Your SCM host
              default: {{ gitlab_host }}
              enum:
                - {{ gitlab_host }}
            owner:
              title: Repo Owner
              type: string
              description: Your SCM host organization/group
              default: {{ gitlab_destination_group }}
              enum:
                - {{ gitlab_destination_group }}

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          component_id: {{ '${{ parameters.component_id }}' }}
          description: {{ '${{ parameters.description }}' }}
          # namespace: {{ '${{ parameters.component_id }}' }}-dev
          namespace: '${{ parameters.component_id }}-dev'
          group_id: {{ '${{ parameters.group_id }}' }}
          artifact_id: {{ '${{ parameters.artifact_id }}' }}
          java_package_name: {{ '${{ parameters.java_package_name }}' }}
          owner: {{ '${{ user.entity.metadata.name }}' }}
          cluster: {{ cluster_subdomain }}
          host: {{ '${{ parameters.repo.host }}' }}
          # destination: {{ '${{ parameters.repo.owner }}' }}/{{ '${{ parameters.component_id }}' }}
          # quay_destination: {{ '${{ parameters.image_organization}}' }}/{{ '${{ parameters.component_id }}' }}
          destination: ${{ parameters.repo.owner }}/${{ parameters.component_id }}
          quay_destination: ${{ parameters.image_organization}}/${{ parameters.component_id }}
          port: 8080
          verify_commits: {{ '${{ parameters.repo.verify_commits }}' }}
          ai_model: {{ '${{ parameters.ai_model }}' }}
          mcp_server: {{ '${{ parameters.mcp_server }}' }}
          file_path: {{ '${{ parameters.mcp_server.file_path }}' }}

    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        repoUrl: "{{ '${{ parameters.repo.host }}' }}?owner={{ '${{ parameters.repo.owner }}' }}&repo={{ '${{parameters.component_id}}' }}"
        repoVisibility: public

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: {{ '${{ steps.publish.output.repoContentsUrl }}' }}
        catalogInfoPath: "/catalog-info.yaml"

    - id: template-gitops-deployment
      name: Generating Deployment Resources
      action: fetch:template
      input:
        url: ./manifests
        copyWithoutTemplating: []
        values:
          component_id: {{ '${{ parameters.component_id }}' }}
          description: {{ '${{ parameters.description }}' }}
          destination: https://{{ '${{ parameters.repo.host }}' }}/{{ '${{ parameters.repo.owner }}' }}/{{ '${{parameters.component_id}}' }}-gitops.git
          source_repository: https://{{ '${{ parameters.repo.host }}' }}/{{ '${{ parameters.repo.owner }}' }}/{{ '${{parameters.component_id}}' }}.git
          repository_name: {{ '${{parameters.component_id}}' }}
          git_owner: {{ '${{ parameters.repo.owner }}' }}
          cluster: {{ cluster_subdomain }}
          # namespace: {{ '${{ parameters.component_id }}' }}-dev
          namespace: ${{ parameters.component_id }}-dev
          image_registry: {{ '${{ parameters.image_registry }}' }}
          image_host: {{ '${{ parameters.image_host }}' }}
          image_organization: {{ '${{ parameters.image_organization }}' }}
          image_name: {{ '${{ parameters.component_id }}' }}
          image_tag: {{ '${{ parameters.image_tag }}' }}
          port: 8080
          repository_host: {{ '${{ parameters.repo.host }}' }}
          deployment_name: quarkus-template
          user: {{ '${{ user.entity.metadata.name }}' }}
          verify_commits: {{ '${{ parameters.repo.verify_commits }}' }}
          ai_model: {{ '${{ parameters.ai_model }}' }}
          mcp_server: {{ '${{ parameters.mcp_server }}' }}
          file_path: {{ '${{ parameters.mcp_server.file_path }}' }}
        targetPath: ./tenant-gitops

    - id: publish-gitops
      name: Publishing to Resource Repository
      action: publish:gitlab
      input:
        repoUrl: "{{ '${{ parameters.repo.host }}' }}?owner={{ '${{ parameters.repo.owner }}' }}&repo={{ '${{parameters.component_id}}' }}-gitops"
        title: gitops resources for {{ '${{ parameters.component_id }}' }}
        description: gitops resources for {{ '${{ parameters.component_id }}' }}
        sourcePath: ./tenant-gitops
        repoVisibility: public

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        # appName: {{ '${{ parameters.component_id }}' }}-bootstrap
        appName: ${{ parameters.component_id }}-bootstrap
        argoInstance: main
        namespace: janus-argocd
        repoUrl: https://{{ '${{ parameters.repo.host }}' }}/{{ '${{ parameters.repo.owner }}' }}/{{ '${{ parameters.component_id }}' }}-gitops.git
        path: 'argocd/'

  output:
    links:
      - title: Source Code Repository
        url: {{ '${{ steps.publish.output.remoteUrl }}' }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: {{ '${{ steps.register.output.entityRef }}' }}